<h2 class="heading--main">Basic Usage</h2>
{{markdown-to-html markdown="
`ember-hifi` provides an easy way to manage audio in your ember app with reliable states, useful events, direct controls and a nice API to interact directly with playing and paused sounds.

**A note before we begin:** Don't try to model your audio. Consider audio a piece of metadata to your other models, like a story or a stream. Let `ember-hifi` do the modelling for you!

Keeping that in mind, let's say you've got some POJOs that look like the following:
"}}

{{code-snippet name="basic-audio.js"}}

{{markdown-to-html markdown="
Let's listen to WNYC FM using that stream mount point. At a minimum, you'll want a way to start and stop the audio.

First, set up a couple actions to integrate with `ember-hifi`.
"}}

{{code-snippet name="play1.js"}}

{{markdown-to-html markdown="
`ember-hifi` provides a `play` method that accepts any of the following as the first argument:
* a String
* an Array of strings
* a Promise that resolves to either of the above

For now we'll stick with the simple use case of a `String`, but the other two cases will be reviewed under advanced usage.

Now make a button wired up to your actions:
"}}

{{code-snippet name="play1.hbs"}}

{{play-basic stream=wnyc}}

{{markdown-to-html markdown="
As you can see, `hifi` provides a helpful `isPlaying` attribute you can use to help manage your UI state. But you might have also noticed a slight delay between clicking play and actually hearing some audio from your speakers.

This delay is caused by the network request to start buffering audio. The `isPlaying` attribute updates in time, but the UI is still in the \"paused\" state until the sound actually starts playing. It's accurate, but `hifi` also exposes an `isLoading` attribute you can use for finer grained UI.
"}}

{{code-snippet name="play2.hbs"}}

{{play-basic stream=wqxr useLoading=true}}

{{markdown-to-html markdown="
But hold up: those buttons play different audio sources, yet they are tied to each other's state. If you click \"Play WNYC\", the \"Play WQXR\" button's UI will change in sync. We can't have that!

The reason this is happening is because each button is reading off of `hifi`'s `isLoading` and `isPlaying` states without regard to whether or not `hifi` is loading that button's specific audio. Those attributes refer to the global, single state of the `hifi` service. As long as a button ties its UI to `hifi`'s state uncondtionally, you'll have this problem.

When you load a piece of audio, `hifi` will update its `currentId` value with the first argument you pass to `play`; typically a url pointing to an audio file or streaming endpoint. There are times when you may need to specify an id for a piece of audio that is not its url; that will be covered in advanced usage.
"}}

{{code-snippet name="play-stateful.js"}}

{{code-snippet name="play-with-state.hbs"}}

{{stateful-play-basic stream=q2}}
